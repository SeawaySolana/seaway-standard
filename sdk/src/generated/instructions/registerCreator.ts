/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category RegisterCreator
 * @category generated
 */
export type RegisterCreatorInstructionArgs = {
  name: number[] /* size: 32 */;
  symbol: number[] /* size: 10 */;
};
/**
 * @category Instructions
 * @category RegisterCreator
 * @category generated
 */
export const registerCreatorStruct = new beet.BeetArgsStruct<
  RegisterCreatorInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["name", beet.uniformFixedSizeArray(beet.u8, 32)],
    ["symbol", beet.uniformFixedSizeArray(beet.u8, 10)],
  ],
  "RegisterCreatorInstructionArgs"
);
/**
 * Accounts required by the _registerCreator_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [_writable_, **signer**] feePayer
 * @property [_writable_] creator
 * @property [] creatorTreasury
 * @property [] establishment
 * @property [**signer**] establishmentAuthority
 * @property [_writable_] collection
 * @property [_writable_] creatorAta
 * @property [_writable_] metadata
 * @property [_writable_] masterEdition
 * @property [] metadataProgram
 * @property [] associatedTokenProgram
 * @category Instructions
 * @category RegisterCreator
 * @category generated
 */
export type RegisterCreatorInstructionAccounts = {
  authority: web3.PublicKey;
  feePayer: web3.PublicKey;
  creator: web3.PublicKey;
  creatorTreasury: web3.PublicKey;
  establishment: web3.PublicKey;
  establishmentAuthority: web3.PublicKey;
  collection: web3.PublicKey;
  creatorAta: web3.PublicKey;
  metadata: web3.PublicKey;
  masterEdition: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  metadataProgram: web3.PublicKey;
  associatedTokenProgram: web3.PublicKey;
  systemProgram?: web3.PublicKey;
  rent?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const registerCreatorInstructionDiscriminator = [
  85, 3, 194, 210, 164, 140, 160, 195,
];

/**
 * Creates a _RegisterCreator_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category RegisterCreator
 * @category generated
 */
export function createRegisterCreatorInstruction(
  accounts: RegisterCreatorInstructionAccounts,
  args: RegisterCreatorInstructionArgs,
  programId = new web3.PublicKey("seaWAy2d8LDYjj9QaettiB653hXjKz4YWrgYb8PUWfz")
) {
  const [data] = registerCreatorStruct.serialize({
    instructionDiscriminator: registerCreatorInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.feePayer,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.creator,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorTreasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.establishment,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.establishmentAuthority,
      isWritable: false,
      isSigner: true,
    },
    {
      pubkey: accounts.collection,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.creatorAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.metadata,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.masterEdition,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.metadataProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.associatedTokenProgram,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.systemProgram ?? web3.SystemProgram.programId,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.rent ?? web3.SYSVAR_RENT_PUBKEY,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
