/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as splToken from "@solana/spl-token";
import * as beet from "@metaplex-foundation/beet";
import * as web3 from "@solana/web3.js";

/**
 * @category Instructions
 * @category WithdrawEstablishmentTreasury
 * @category generated
 */
export type WithdrawEstablishmentTreasuryInstructionArgs = {
  amount: beet.bignum;
};
/**
 * @category Instructions
 * @category WithdrawEstablishmentTreasury
 * @category generated
 */
export const withdrawEstablishmentTreasuryStruct = new beet.BeetArgsStruct<
  WithdrawEstablishmentTreasuryInstructionArgs & {
    instructionDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["instructionDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["amount", beet.u64],
  ],
  "WithdrawEstablishmentTreasuryInstructionArgs"
);
/**
 * Accounts required by the _withdrawEstablishmentTreasury_ instruction
 *
 * @property [_writable_, **signer**] authority
 * @property [] establishment
 * @property [] establishmentTreasury
 * @property [] mint
 * @property [_writable_] establishmentAta
 * @property [_writable_] authorityAta
 * @category Instructions
 * @category WithdrawEstablishmentTreasury
 * @category generated
 */
export type WithdrawEstablishmentTreasuryInstructionAccounts = {
  authority: web3.PublicKey;
  establishment: web3.PublicKey;
  establishmentTreasury: web3.PublicKey;
  mint: web3.PublicKey;
  establishmentAta: web3.PublicKey;
  authorityAta: web3.PublicKey;
  tokenProgram?: web3.PublicKey;
  anchorRemainingAccounts?: web3.AccountMeta[];
};

export const withdrawEstablishmentTreasuryInstructionDiscriminator = [
  177, 17, 235, 171, 232, 227, 173, 15,
];

/**
 * Creates a _WithdrawEstablishmentTreasury_ instruction.
 *
 * @param accounts that will be accessed while the instruction is processed
 * @param args to provide as instruction data to the program
 *
 * @category Instructions
 * @category WithdrawEstablishmentTreasury
 * @category generated
 */
export function createWithdrawEstablishmentTreasuryInstruction(
  accounts: WithdrawEstablishmentTreasuryInstructionAccounts,
  args: WithdrawEstablishmentTreasuryInstructionArgs,
  programId = new web3.PublicKey("seaWAy2d8LDYjj9QaettiB653hXjKz4YWrgYb8PUWfz")
) {
  const [data] = withdrawEstablishmentTreasuryStruct.serialize({
    instructionDiscriminator:
      withdrawEstablishmentTreasuryInstructionDiscriminator,
    ...args,
  });
  const keys: web3.AccountMeta[] = [
    {
      pubkey: accounts.authority,
      isWritable: true,
      isSigner: true,
    },
    {
      pubkey: accounts.establishment,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.establishmentTreasury,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.mint,
      isWritable: false,
      isSigner: false,
    },
    {
      pubkey: accounts.establishmentAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.authorityAta,
      isWritable: true,
      isSigner: false,
    },
    {
      pubkey: accounts.tokenProgram ?? splToken.TOKEN_PROGRAM_ID,
      isWritable: false,
      isSigner: false,
    },
  ];

  if (accounts.anchorRemainingAccounts != null) {
    for (const acc of accounts.anchorRemainingAccounts) {
      keys.push(acc);
    }
  }

  const ix = new web3.TransactionInstruction({
    programId,
    keys,
    data,
  });
  return ix;
}
