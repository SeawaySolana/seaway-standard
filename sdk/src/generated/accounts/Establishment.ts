/**
 * This code was GENERATED using the solita package.
 * Please DO NOT EDIT THIS FILE, instead rerun solita to update it or write a wrapper to add functionality.
 *
 * See: https://github.com/metaplex-foundation/solita
 */

import * as web3 from "@solana/web3.js";
import * as beet from "@metaplex-foundation/beet";
import * as beetSolana from "@metaplex-foundation/beet-solana";

/**
 * Arguments used to create {@link Establishment}
 * @category Accounts
 * @category generated
 */
export type EstablishmentArgs = {
  version: number;
  treasuryBump: number;
  treasury: web3.PublicKey;
  authority: web3.PublicKey;
  requiresSignOff: boolean;
  saleBasisPoints: number;
  royaltiesShare: number;
  isActive: boolean;
  scopes: boolean[] /* size: 10 */;
  baseUri: number[] /* size: 94 */;
  padding: beet.bignum[] /* size: 12 */;
};

export const establishmentDiscriminator = [
  210, 167, 104, 134, 225, 34, 70, 173,
];
/**
 * Holds the data for the {@link Establishment} Account and provides de/serialization
 * functionality for that data
 *
 * @category Accounts
 * @category generated
 */
export class Establishment implements EstablishmentArgs {
  private constructor(
    readonly version: number,
    readonly treasuryBump: number,
    readonly treasury: web3.PublicKey,
    readonly authority: web3.PublicKey,
    readonly requiresSignOff: boolean,
    readonly saleBasisPoints: number,
    readonly royaltiesShare: number,
    readonly isActive: boolean,
    readonly scopes: boolean[] /* size: 10 */,
    readonly baseUri: number[] /* size: 94 */,
    readonly padding: beet.bignum[] /* size: 12 */
  ) {}

  /**
   * Creates a {@link Establishment} instance from the provided args.
   */
  static fromArgs(args: EstablishmentArgs) {
    return new Establishment(
      args.version,
      args.treasuryBump,
      args.treasury,
      args.authority,
      args.requiresSignOff,
      args.saleBasisPoints,
      args.royaltiesShare,
      args.isActive,
      args.scopes,
      args.baseUri,
      args.padding
    );
  }

  /**
   * Deserializes the {@link Establishment} from the data of the provided {@link web3.AccountInfo}.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static fromAccountInfo(
    accountInfo: web3.AccountInfo<Buffer>,
    offset = 0
  ): [Establishment, number] {
    return Establishment.deserialize(accountInfo.data, offset);
  }

  /**
   * Retrieves the account info from the provided address and deserializes
   * the {@link Establishment} from its data.
   *
   * @throws Error if no account info is found at the address or if deserialization fails
   */
  static async fromAccountAddress(
    connection: web3.Connection,
    address: web3.PublicKey,
    commitmentOrConfig?: web3.Commitment | web3.GetAccountInfoConfig
  ): Promise<Establishment> {
    const accountInfo = await connection.getAccountInfo(
      address,
      commitmentOrConfig
    );
    if (accountInfo == null) {
      throw new Error(`Unable to find Establishment account at ${address}`);
    }
    return Establishment.fromAccountInfo(accountInfo, 0)[0];
  }

  /**
   * Provides a {@link web3.Connection.getProgramAccounts} config builder,
   * to fetch accounts matching filters that can be specified via that builder.
   *
   * @param programId - the program that owns the accounts we are filtering
   */
  static gpaBuilder(
    programId: web3.PublicKey = new web3.PublicKey(
      "seaWAy2d8LDYjj9QaettiB653hXjKz4YWrgYb8PUWfz"
    )
  ) {
    return beetSolana.GpaBuilder.fromStruct(programId, establishmentBeet);
  }

  /**
   * Deserializes the {@link Establishment} from the provided data Buffer.
   * @returns a tuple of the account data and the offset up to which the buffer was read to obtain it.
   */
  static deserialize(buf: Buffer, offset = 0): [Establishment, number] {
    return establishmentBeet.deserialize(buf, offset);
  }

  /**
   * Serializes the {@link Establishment} into a Buffer.
   * @returns a tuple of the created Buffer and the offset up to which the buffer was written to store it.
   */
  serialize(): [Buffer, number] {
    return establishmentBeet.serialize({
      accountDiscriminator: establishmentDiscriminator,
      ...this,
    });
  }

  /**
   * Returns the byteSize of a {@link Buffer} holding the serialized data of
   * {@link Establishment}
   */
  static get byteSize() {
    return establishmentBeet.byteSize;
  }

  /**
   * Fetches the minimum balance needed to exempt an account holding
   * {@link Establishment} data from rent
   *
   * @param connection used to retrieve the rent exemption information
   */
  static async getMinimumBalanceForRentExemption(
    connection: web3.Connection,
    commitment?: web3.Commitment
  ): Promise<number> {
    return connection.getMinimumBalanceForRentExemption(
      Establishment.byteSize,
      commitment
    );
  }

  /**
   * Determines if the provided {@link Buffer} has the correct byte size to
   * hold {@link Establishment} data.
   */
  static hasCorrectByteSize(buf: Buffer, offset = 0) {
    return buf.byteLength - offset === Establishment.byteSize;
  }

  /**
   * Returns a readable version of {@link Establishment} properties
   * and can be used to convert to JSON and/or logging
   */
  pretty() {
    return {
      version: this.version,
      treasuryBump: this.treasuryBump,
      treasury: this.treasury.toBase58(),
      authority: this.authority.toBase58(),
      requiresSignOff: this.requiresSignOff,
      saleBasisPoints: this.saleBasisPoints,
      royaltiesShare: this.royaltiesShare,
      isActive: this.isActive,
      scopes: this.scopes,
      baseUri: this.baseUri,
      padding: this.padding,
    };
  }
}

/**
 * @category Accounts
 * @category generated
 */
export const establishmentBeet = new beet.BeetStruct<
  Establishment,
  EstablishmentArgs & {
    accountDiscriminator: number[] /* size: 8 */;
  }
>(
  [
    ["accountDiscriminator", beet.uniformFixedSizeArray(beet.u8, 8)],
    ["version", beet.u8],
    ["treasuryBump", beet.u8],
    ["treasury", beetSolana.publicKey],
    ["authority", beetSolana.publicKey],
    ["requiresSignOff", beet.bool],
    ["saleBasisPoints", beet.u16],
    ["royaltiesShare", beet.u8],
    ["isActive", beet.bool],
    ["scopes", beet.uniformFixedSizeArray(beet.bool, 10)],
    ["baseUri", beet.uniformFixedSizeArray(beet.u8, 94)],
    ["padding", beet.uniformFixedSizeArray(beet.u64, 12)],
  ],
  Establishment.fromArgs,
  "Establishment"
);
